plugins {
    id 'java-library'
    id 'maven-publish'
    id 'signing'
}

group = 'com.kazurayam'
version = '0.1.4'

ext {
    isReleaseVersion =!version.endsWith("SNAPSHOT")
}

compileJava {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

repositories {
    mavenCentral()
    maven {
        url = uri("https://maven.pkg.github.com/kazurayam/${rootProject.name}")
        credentials {
            username = project.findProperty("gpr.user")
            password = project.findProperty("gpr.key")
        }
    }
    mavenLocal()
}

dependencies {
    // https://mvnrepository.com/artifact/io.github.java-diff-utils/java-diff-utils
    implementation 'io.github.java-diff-utils:java-diff-utils:4.12'

    // https://mvnrepository.com/artifact/org.slf4j/slf4j-api
    implementation 'org.slf4j:slf4j-api:2.0.11'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
    // https://mvnrepository.com/artifact/org.assertj/assertj-core
    testImplementation 'org.assertj:assertj-core:3.25.2'
    // https://mvnrepository.com/artifact/com.kazurayam/unittest-helper
    testImplementation 'com.kazurayam:unittest-helper:0.3.0'
    // https://mvnrepository.com/artifact/org.slf4j/slf4j-simple
    testImplementation 'org.slf4j:slf4j-simple:2.0.11'
    // https://mvnrepository.com/artifact/com.fasterxml.jackson.core/jackson-databind
    testImplementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
}

test {
    useJUnitPlatform() {
        if (project.hasProperty("groups")) {
            includeTags "$groups"
        }
        if (project.hasProperty("excludedGroups")) {
            excludeTags "$excludedGroups"
        }
    }

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
    }
}

javadoc {
    options.showFromProtected()
    failOnError = false
    options.locale = "en_US"
}
task copyJavadocToDocsDir(type: Copy) {
    from "build/docs/javadoc"
    into "./docs/api"
}
javadoc.finalizedBy copyJavadocToDocsDir

jar {
    archiveBaseName = "${rootProject.name}"
    manifest {
        attributes 'Main-Class' : 'com.kazurayam.difflib.text.Main'
    }
}

/**
 * translate docs/index_.adoc to docs/index.md
 * with instruction to Jekyll Blog to generate TOC
 */
task gendocs {
    doLast {
        exec {
            workingDir './docs'
            commandLine './adoc2md.sh', '-t'
        }
    }
}
publishing {
    publications {
        javadiffreport(MavenPublication) {
            from components.java
            artifactId = "${rootProject.name}"
            pom {
                groupId = project.group
                name = project.rootProject.name
                description = "A wrapper for the Java Diff Util library. The java-diff-report generates a report of the diff of 2 files in Markdown format"
                url = "https://kazurayam.github.io/${rootProject.name}/"
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://www.apache.org.licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "kazurayam"
                        name = "URAYAMA,kazuaki"
                        email = "kazuaki.urayama@gmail.com"
                    }
                }
                scm {
                    connection = "scm:git:https://github.com/kazurayam/${project.rootProject.name}.git"
                    developerConnection = "scm:git:git@github.com:kazurayam/${project.rootProject.name}.git"
                    url = "https://github.com/kazurayam/${project.rootProject.name}"
                }
            }
        }
    }
    repositories {
        maven {
            def releaseRepo = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotRepo = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseVersion ? releaseRepo: snapshotRepo
            credentials {
                username = project.hasProperty("ossrhUsername") ? ossrhUsername : "Unknown user"
                password = project.hasProperty("ossrhPassword") ? ossrhPassword : "Unknown password"
            }
        }
        maven {
            name = "gpr"
            url = uri("https://maven.pkg.github.com/kazurayam/${rootProject.name}")
            credentials {
                username = project.findProperty("gpr.user")
                password = project.findProperty("gpr.key")
            }
        }
    }
}

java {
    withSourcesJar()
    withJavadocJar()
}

signing {
    sign publishing.publications.javadiffreport
}

// I do not want to sign the SNAPSHOT
tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

